#include <bits/stdc++.h>
using namespace std;
#define lli long long int
const int neutro=1e9;
const int maxn =100000;
lli vx[maxn],n;
lli st[4*maxn],st2[4*maxn];

void build(lli node,lli l,lli r){
     if(l==r){
        st[node]=vx[l];
        return;
     }
    lli mid=(l+r)/2;
    lli left=(node*2)+1;
    lli right=(node*2)+2;
    build(left,l,mid);
    build(right,mid+1,r);
st[node]=min(st[left],st[right]);
}
lli query(lli node,lli l,lli r,lli a,lli b){
      if(a<=l && r<=b)return st[node];
      if(l>b || r<a)return neutro;
      lli mid=(l+r)/2;
      lli left=(node*2)+1;
      lli right=(node*2)+2;
return min(query(left,l,mid,a,b),query(right,mid+1,r,a,b));
}
void update(lli node,lli l,lli r,lli i,lli x){
           if(l>i || r<i)return;
           if(l==i && r==i){
                st[node]=x;
           return;
           }
          lli mid=(l+r)/2;
          lli left=(node*2)+1;
          lli right=(node*2)+2;
          update(left,l,mid,i,x);
          update(right,mid+1,r,i,x);
          st[node]=min(st[left],st[right]);
}
void build2(lli node,lli l,lli r){
     if(l==r){
        st2[node]=vx[l];
        return;
     }
    lli mid=(l+r)/2;
    lli left=(node*2)+1;
    lli right=(node*2)+2;
    build2(left,l,mid);
    build2(right,mid+1,r);
st2[node]=max(st2[left],st2[right]);
}
lli query2(lli node,lli l,lli r,lli a,lli b){
      if(a<=l && r<=b)return st2[node];
      if(l>b || r<a)return 0;
      lli mid=(l+r)/2;
      lli left=(node*2)+1;
      lli right=(node*2)+2;
return max(query2(left,l,mid,a,b),query2(right,mid+1,r,a,b));
}
void update2(lli node,lli l,lli r,lli i,lli x){
           if(l>i || r<i)return;
           if(l==i && r==i){
                st2[node]=x;
           return;
           }
          lli mid=(l+r)/2;
          lli left=(node*2)+1;
          lli right=(node*2)+2;
          update2(left,l,mid,i,x);
          update2(right,mid+1,r,i,x);
          st2[node]=max(st2[left],st2[right]);
}
main(){
    ios_base::sync_with_stdio(0);cin.tie(0);
        cin>>n; int q;cin>>q;
for(int i=0;i<n;i++)cin>>vx[i];

  build(0,0,n-1);
  build2(0,0,n-1);

  while(q--){
    char  t;cin>>t;
    if(t=='A'){
        int i,x;cin>>i>>x;
        update(0,0,n-1,i-1,x);
         update2(0,0,n-1,i-1,x);
    }else
    {
        int l,r;
        cin>>l>>r;
        cout<<query(0,0,n-1,l-1,r-1)<<" "<<query2(0,0,n-1,l-1,r-1)<<"\n";
    }
  }
}
