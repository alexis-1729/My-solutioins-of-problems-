#include <bits/stdc++.h>

using namespace std;
struct node{
	int i,j;
};

int vx[]={-1,1,0,0};int vy[]={0,0,1,-1};
bool  vb[500][500];
int mx[501][501],n,mayor=0;
int solve(int i ,int j,int d){
		  int r=0;vb[i][j]=true;
		  queue<node >cola;
	  cola.push(node{i,j});
	while(!cola.empty()){
		
		++r;
		for(int i=0;i<4;i++){
			node hi={cola.front().i+vx[i],cola.front().j+vy[i]};
	 if (hi.i < 0 || hi.i >= n || hi.j < 0 || hi.j >= n || vb[hi.i][hi.j] || abs(mx[hi.i][hi.j] - mx[cola.front().i][cola.front().j]) > d)
	 continue;
      
       vb[hi.i][hi.j]=true;
       cola.push(hi);
		}
		cola.pop();
	}
	return r;
}



int binsec(int a,int b){
	      while(a<b){
	      	int m=(a+b)/2;int T=0;
	      	memset(vb,false,sizeof(vb));
	      	for(int i=0;i<n;i++)
	      		for(int j=0;j<n;j++)
	      		 if(!vb[i][j])
	      			T=max(T,solve(i,j,m));
	      			
	      			if(T>=n*n/2)
	      				b=m;
	      				
					  else
					  
					  a=m+1;
	}
	return a;
}

 main() {
	ios_base::sync_with_stdio(0);cin.tie(0);
	cin>>n;
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++){
				cin>>mx[i][j];
				mayor=max(mayor,mx[i][j]);
		}
	
	
	cout<<binsec(0,mayor);
}
