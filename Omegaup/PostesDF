#include<iostream>
using namespace std;

int n,k;
 int array[1000001];

void merge(int p, int q, int r) {
    int lowHalfSize = q - p + 1;
    int highHalfSize = r - q;
    long long int lowHalf[lowHalfSize];
   long long  int highHalf[highHalfSize];

    int lh = 0;
    for (int i = p; i <= q; i++) {
        lowHalf[lh] = array[i];
        lh ++;
    }

    int hh = 0;
    for (int i = q+1; i <= r; i++) {
        highHalf[hh] = array[i];
        hh ++;
    }

    int lowHalfIndex = 0;
    int highHalfIndex = 0;
    for (int i = p; i <= r; i++) {
        if (lowHalfIndex < lowHalfSize && highHalfIndex < highHalfSize) {
            if (lowHalf[lowHalfIndex] < highHalf[highHalfIndex]) {\
                array[i] = lowHalf[lowHalfIndex];
                lowHalfIndex++;
            } else {
                array[i] = highHalf[highHalfIndex];
                highHalfIndex++;
            }
        } else if (highHalfIndex >= highHalfSize) {
            array[i] = lowHalf[lowHalfIndex];
            lowHalfIndex++;
        } else {
            array[i] = highHalf[highHalfIndex];
            highHalfIndex++;
        }
    }
}


void mergeSort(int p, int r) {
    if (p == r) {
        return;
    }

    int q = p + (r - p) / 2;

    mergeSort(p, q);
    mergeSort(q + 1, r);

    merge(p, q, r);
}

 main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
    cin >> k>>n;
    for (int i = 1; i <= n; i++) {
        cin >> array[i];
    }

    mergeSort(1, n);
int mink=1000000;int i=1;
    while(k<=n){
        mink=min(mink,array[k]-array[i]);
        i++;k++;
    }
    cout<<mink;
}
