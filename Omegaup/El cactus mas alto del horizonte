#include<iostream>
using namespace std;

int n,m;
int array[200000];

void merge(int p, int q, int r) {
    int lowHalfSize = q - p + 1;
    int highHalfSize = r - q;
    int lowHalf[lowHalfSize];
    int highHalf[highHalfSize];

    int lh = 0;
    for (int i = p; i <= q; i++) {
        lowHalf[lh] = array[i];
        lh ++;
    }

    int hh = 0;
    for (int i = q+1; i <= r; i++) {
        highHalf[hh] = array[i];
        hh ++;
    }

    int lowHalfIndex = 0;
    int highHalfIndex = 0;
    for (int i = p; i <= r; i++) {
        if (lowHalfIndex < lowHalfSize && highHalfIndex < highHalfSize) {
            if (lowHalf[lowHalfIndex] > highHalf[highHalfIndex]) {\
                array[i] = lowHalf[lowHalfIndex];
                lowHalfIndex++;
            } else {
                array[i] = highHalf[highHalfIndex];
                highHalfIndex++;
            }
        } else if (highHalfIndex >= highHalfSize) {
            array[i] = lowHalf[lowHalfIndex];
            lowHalfIndex++;
        } else {
            array[i] = highHalf[highHalfIndex];
            highHalfIndex++;
        }
    }
}


void mergeSort(int p, int r) {
    if (p == r) {
        return;
    }

    int q = p + (r - p) / 2;

    mergeSort(p, q);
    mergeSort(q + 1, r);

    merge(p, q, r);
}

int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
    cin >> n;
    for (int i = 0; i < n+m; i++) {
        cin >> array[i];
    }

    mergeSort(0, n-1);int q;
  cin>>q;
  for(int i=1;i<=q;i++){
      int x;
      cin>>x;
      cout<<array[x-1]<<" ";


  }
    return 0;
}
